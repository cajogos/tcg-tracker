---
import Layout from '../layouts/Layout.astro';

import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

const allSeries: CollectionEntry<'series'>[] = await getCollection('series');
const allSets: CollectionEntry<'sets'>[] = await getCollection('sets');

// Initialize each series item with an empty sets array
for (let i = 0; i < allSeries.length; i++) {
	allSeries[i].data.sets = [];
}

// Link each set to the corresponding series and add cardCount to each set
allSets.forEach((set) => {
	const series = allSeries.find((series) => series.id === set.data.seriesId);
	if (series) {
		const cardsObtained = set.data.cards.filter((card) => card.obtained);
		const cardsInBinder = set.data.cards.filter((card) => card.binder);
		const cardsNotObtained = set.data.cards.filter((card) => !card.obtained);
		series.data.sets.push({
			...set,
			cardCount: set.data.cards.length, // Add card count directly to the set
			cardsObtained: cardsObtained.length,
			cardsInBinder: cardsInBinder.length,
			cardsNotObtained: cardsNotObtained.length
		});
	}
});
---

<Layout title="TCG Card Collection" description="My collection of trading cards">
	<div class="container mx-auto py-12 px-4 sm:px-6 lg:px-8">
		<h1 class="text-5xl font-extrabold text-center mb-16 text-gray-800">My TCG Tracker</h1>

		<a href="/binder" class="text-indigo-600 hover:text-indigo-800 font-semibold inline-block mb-8">
			View Binder
		</a>

		<div class="space-y-10">
			{allSeries.map((series) => (
				<div class="bg-white p-8 border border-gray-200 rounded-lg shadow-lg transition transform hover:scale-105">
					<h2 class="text-3xl font-semibold text-indigo-800 mb-8">
						<span class="text-gray-500">Series:</span> {series.data.name}
					</h2>
					<ul class="space-y-4">
						{series.data.sets.map((set: any) => {
							if (set.cardCount === 0) return null;

							return (
								<li>
									<a href={`/set/${set.id}`} class="block bg-gradient-to-r from-indigo-50 via-white to-indigo-100 p-6 rounded-lg shadow-md hover:shadow-lg transition-transform transform hover:scale-105 border border-gray-200">
										<div class="flex items-center space-x-4">
											<div class="flex-shrink-0 bg-indigo-200 rounded-full w-14 h-14 flex items-center justify-center text-indigo-600 font-bold">
												{set.data.name.charAt(0).toUpperCase()}
											</div>
											<div class="flex-1">
												<div class="text-lg font-bold text-indigo-800">{set.data.name}</div>
												<div class="text-sm text-gray-500 mt-1">
													<strong>Total Cards:</strong> {set.cardCount}
												</div>
												<div class="flex space-x-2 mt-2">
													<span class="text-xs font-semibold text-green-600 bg-green-100 px-2 py-1 rounded-full">Obtained: {set.cardsObtained}</span>
													<span class="text-xs font-semibold text-blue-600 bg-blue-100 px-2 py-1 rounded-full">In Binder: {set.cardsInBinder}</span>
													<span class="text-xs font-semibold text-red-600 bg-red-100 px-2 py-1 rounded-full">Not Obtained: {set.cardsNotObtained}</span>
												</div>
											</div>
											<div class="text-indigo-600 flex items-center">
												<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
													<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
												</svg>
											</div>
										</div>
									</a>
								</li>
							);
						})}
					</ul>
				</div>
			))}
		</div>
	</div>
</Layout>
