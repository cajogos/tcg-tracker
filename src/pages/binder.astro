---
import Layout from '../layouts/Layout.astro';
import { getEntry } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import { getImageUrl } from '../utils';

type CardInfo = {
    set: string;
    setName: string;
    name: string;
    number: string;
    obtained: boolean;
    binder: boolean;
    img: string;
};

const setOrder = [
    'swsh9tg', 'swsh10tg', 'swsh11tg', 'swsh12tg', 'swsh12pt5gg'
];

const cards: CardInfo[] = [];

// Fetch card data from each set in the specified order
await Promise.all(
    setOrder.map(async (setId) => {
        const set = await getEntry('sets', setId) as CollectionEntry<'sets'>;
        set.data.cards.forEach((card: any) => {
            cards.push({
                set: set.data.id,
                setName: set.data.name,
                name: card.name,
                number: card.number,
                obtained: card.obtained,
                binder: card.binder,
                img: getImageUrl(set.data.id, card.number)
            });
        });
    })
);

function paginateWithPlaceholders(array: CardInfo[], size: number): Array<(CardInfo | null)[]> {
    const pages: Array<(CardInfo | null)[]> = [];

    for (let i = 0; i < array.length; i += size) {
        const page: (CardInfo | null)[] = array.slice(i, i + size);
        while (page.length < size) {
            page.push(null);
        }
        pages.push(page);
    }
    return pages;
}

// Group cards by set ID and paginate each set's cards into pages of 9
const setsWithPages = setOrder.map((setId) => {
    const setCards = cards.filter(card => card.set === setId);
    const pages = paginateWithPlaceholders(setCards, 9);
    return { setId, setName: setCards[0].setName, pages };
});
---

<Layout title="TCG Binder" description="My collection of trading cards in a 3x3 binder layout">
    <div class="container mx-auto py-12 px-4 sm:px-6 lg:px-8">
        <h1 class="text-5xl font-extrabold text-center mb-16 text-gray-800">My TCG Binder</h1>

        <a href="/" class="text-indigo-600 hover:text-indigo-800 font-semibold inline-block mb-8">
            Back to All Sets
        </a>

        {setsWithPages.map(({ setId, setName, pages }) => (
            <div class="mb-16 p-6 rounded-lg bg-gray-50 border border-gray-200 shadow-sm">
                <h2 class="text-3xl font-semibold text-center text-indigo-800 mb-8">{setName} <small class="text-indigo-500 text-sm opacity-70">{setId}</small></h2>

                {pages.map((page, pageIndex) => (
                    <div class="mb-10 p-4 rounded-lg border border-gray-200 bg-white">
                        <div class="grid grid-cols-3 gap-6">
                            {page.map((card) => (
                                card ? (
                                    <div class={`relative bg-white p-4 rounded-md shadow hover:shadow-md transition transform hover:-translate-y-1 flex flex-col items-center ${card.binder ? '' : 'opacity-50'} hover:opacity-100`}>

                                        <div class="absolute top-2 left-2 flex space-x-2">
                                            {card.obtained && (
                                                <span class="text-xs font-semibold text-green-700 bg-green-100 px-2 py-1 rounded-full">Obtained</span>
                                            )}
                                            {card.binder && (
                                                <span class="text-xs font-semibold text-blue-700 bg-blue-100 px-2 py-1 rounded-full">In Binder</span>
                                            )}
                                        </div>

                                        <img src={card.img} alt={card.name} class="mb-4 w-48" />
                                        <h2 class="text-lg font-semibold text-gray-800 text-center">{card.name}</h2>
                                        <p class="text-sm text-gray-500 text-center">{card.set} - {card.number}</p>
                                    </div>
                                ) : (
                                    <div class="bg-gray-100 p-4 rounded-md shadow-inner flex items-center mx-auto justify-center w-48 h-64">
                                        <p class="text-gray-400 text-center">Empty Slot</p>
                                    </div>
                                )
                            ))}
                        </div>
                    </div>
                ))}
            </div>
        ))}
    </div>
</Layout>
